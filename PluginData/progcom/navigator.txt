;this is a program that holds the vertical velocity for your spacecraft.
;when running this program, input the vertical speed you want times 16 in the CCP
;so, if you want to land at 1 m/s you press these keys, in order:
;'1' '6' '-' 'enter'
;to hover, simply enter 0

;to start this program, enter
;"load run navigator.txt" in the console
;then disable CTL (to give you control over the spacecraft) and turn on the computer
.text

;include all needed libraries
#include libMath.txt
#include libVectorMath.txt
#include libFlightHelper.txt

;a5-a7 contains direction vector
;we don't need to save their values as this is the starting location for the program.
;these registers are never modified elsewhere in the program, so might as well use them here


;every time this subroutine is run it prints the current elapsed cycles to first output box.
intHandler:
	push	r1
	push	r2
	movi	r2, 2
	rd	r1, r0, GLOBAL_CLOCK
	wr 	r1, r2, GLOBAL_NUMPAD_OUT
	pop	r2
	pop	r1
	eret

;this bit of code sets the timer max to CPU_CLOCKRATE cycles (1 second)
;and then it sets intHandler to be the interrupt handler
;lastly, it enables interrupts, as well as makes sure the timer spawns an interrupt each time it resets.
#global main
main:
	movil 	r1, CPU_CLOCKRATE;max number to move for movil is 2097151
	wr	r1, r0, GLOBAL_TIMER_MAX
	movi	r1, intHandler
	wr	r1, r0, GLOBAL_IADRESS

	movi	r1, 3	;enable timer interrupts
	wr	r1, r0, GLOBAL_IENABLE

	;init starting vector
	movi 	a5, 0
	movi 	a6, 1024
	movi 	a7, 0
	;init starting speed
	movi	a8, 0
	loop:
	rd	r1, r0, GLOBAL_NUMPAD_NEWIN
	beq	r1, r0, speedHold
	wr	r0, r0, GLOBAL_NUMPAD_NEWIN
	
	rd	r1, r0, GLOBAL_NUMPAD_IN
	
	fflush
	fpush	r1
	ftof
	movi	r1, 16
	fpush	r1
	ftof
	fdiv
	fpop	r1
	mov	a8, r1
	wr	a8, r0, GLOBAL_NUMPAD_OUT


	speedHold:
	mov	r1, a8
	call	libfh_holdVertSpeed

	jmp	loop
