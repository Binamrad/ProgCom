;this file contains code designed to print text to the screen

.text
#include libExtnd.txt

;makes the screen use the c64 colors/layout
;you don't need to call this for these functions to work
#global init_screen
init_screen:
	;make the edges of the screen bright blue, and the screen dark blue.
	;set r1 to swo bright blue nulls
	;set r2/r3 to a bright blue and a dark blue null
	;set r4 to dark blue
	movhi	r1, 57344
	ori	r1, r1, 57344
	movhi	r2, 24576
	ori	r2, r2, 57344
	movhi	r3, 57344
	ori	r3, r3, 24576
	movhi	r4, 24576
	ori	r4, r4, 24576
	
	movi	r5, 0
	movi	r6, 16

set_upper:
	wr	r1, r5, GLOBAL_SCREEN
	addi	r5, r5, 1
	bl	r5, r6, set_upper
	
	movi	r5, 16
	movi	r6, 496
set_mid:
	wr	r2, r5, GLOBAL_SCREEN
	wr	r4, r5, GLOBAL_SCREEN + 1
	wr	r4, r5, GLOBAL_SCREEN + 2
	wr	r4, r5, GLOBAL_SCREEN + 3
	wr	r4, r5, GLOBAL_SCREEN + 4
	wr	r4, r5, GLOBAL_SCREEN + 5
	wr	r4, r5, GLOBAL_SCREEN + 6
	wr	r4, r5, GLOBAL_SCREEN + 7
	wr	r4, r5, GLOBAL_SCREEN + 8
	wr	r4, r5, GLOBAL_SCREEN + 9
	wr	r4, r5, GLOBAL_SCREEN + 10
	wr	r4, r5, GLOBAL_SCREEN + 11
	wr	r4, r5, GLOBAL_SCREEN + 12
	wr	r4, r5, GLOBAL_SCREEN + 13
	wr	r4, r5, GLOBAL_SCREEN + 14
	wr	r3, r5, GLOBAL_SCREEN + 15
	addi	r5, r5, 16
	bl	r5, r6, set_mid

	movi	r5, 496
	movi	r6, 512
set_low:
	wr	r1, r5, GLOBAL_SCREEN
	addi	r5, r5, 1
	bl	r5, r6, set_low

	;set background color to dark blue
	movi	r1, 6
	wr	r1, r0, colBackground
	;set font color to bright blue
	movi	r1, 14
	wr	r1, r0, colFont
	ret

#global setFontBackground
setFontBackground:
	wr	r1, r0, colBackground
	ret

#global setFontCol
setFontCol:
	wr	r1, r0, colFont
	ret

;takes a char in r1 and puts it at the screen pointer
#global putChar
putChar:
	rd	r2, r0, col_ptr
	rd	r3, r0, row_ptr
	
	;make sure pointers are in bounds
	;column pointer
	;movi	r4, 31
	rd	r4, r0, col_max
	bl	r2, r4, 4
	;movi	r2, 1
	rd	r2, r0, col_min
	addi	r3, r3, 16
	wr	r2, r0, col_ptr
	wr	r3, r0, row_ptr
	
	;row pointer
	;movi	r4, 496
	rd	r4, r0, row_max
	bl	r3, r4, 2
	;movi	r3, 16
	rd	r3, r0, row_min
	wr	r3, r0, row_ptr
	
	;get offset
	mov	r6, r2
	sri	r2, r2, 1
	add	r2, r2, r3
	
	;add color to character
	rd	r3, r0, colFont
	sli	r3, r3, 8
	add	r1, r1, r3
	rd	r3, r0, colBackground
	sli	r3, r3, 12
	add	r1, r1, r3

	;set character at proper position
	andi	r3, r6, 1
	sli	r3, r3, 4
	shl	r1, r1, r3

	;read destination character
	rd	r4, r2, GLOBAL_SCREEN

	;clear space for the character
	movi	r5, -1  ;0xffff
	shl	r5, r5, r3
	rli	r5, r5, 16; might be a good choise to replace this with not
	and	r4, r4, r5
	
	;merge character and write back
	add	r1, r1, r4
	wr	r1, r2, GLOBAL_SCREEN

	;add one to col_ptr and write the things back
	rd	r1, r0, col_ptr
	addi	r1, r1, 1
	wr	r1, r0, col_ptr

	ret

;the same as putChar, but takes formatting into account
#global printChar
printChar:
	push	ra
	
	;if tab, align to nearest four chars
	movi	r2, 9
	bne	r1, r2, printc_n
	rd	r3, r0, col_ptr
	andi	r3, r3, 3
	movi	r4, 4
	sub	r3, r4, r3
printc_tab_loop:
	beq	r3, r0, printc_end
	push	r3
	movi	r1, 32
	call	putChar
	pop	r3
	subi	r3, r3, 1
	br	printc_tab_loop	

	;if newline, add 16 to row_ptr
printc_n:
	movi	r2, 10
	bne	r2, r1, printc_r
	rd	r1, r0, row_ptr
	addi	r1, r1, 16
	wr	r1, r0, row_ptr
	br	printc_end

	;if carrige return, set col_ptr to col_min
printc_r:
	movi	r2, 13
	bne	r1, r2, printc_put
	rd	r1, r0, col_min
	wr	r1, r0, col_ptr
	br	printc_end


	;else call putchar
printc_put:
	call	putChar

printc_end:	
	pop	ra
	ret

;prints the string r1 points to until it finds a null character
;this function has no regard for wrapping around the screen etc.
#global printStr
printStr:
	push	a4
	push	a5
	push	ra
	mov	a4, r1

printsLoop:
	rd	a5, a4, 0

	andi	r1, a5, 255
	beq	r1, r0, end
	call	printChar

	sri	r1, a5, 8
	andi	r1, r1, 255
	beq	r1, r0, end
	call	printChar

	sri	r1, a5, 16
	andi	r1, r1, 255
	beq	r1, r0, end
	call	printChar

	sri	r1, a5, 24
	andi	r1, r1, 255
	beq	r1, r0, end
	call	printChar

	addi	a4, a4, 1
	br	printsLoop

end:
	pop	ra
	pop	a5
	pop	a4

	ret

;define a way to make the borders of the text box smaller or larger

;border size in r1
#global setHorBorder
setHorBorder:
	wr	r1, r0, col_min
	movi	r2, 32
	sub	r2, r2, r1
	wr	r2, r0, col_max
	ret

;border size in r1
#global setVertBorder
setVertBorder:
	sli	r1, r1, 4
	wr	r1, r0, row_min
	movi	r2, 1024
	sub	r2, r2, r1
	wr	r2, r0, row_max
	ret

;x and y in r1 and r2 respectively
#global setScreenCursor
setScreenCursor:
	sli	r2, r2, 4
	wr	r1, r0, col_ptr
	wr	r2, r0, row_ptr
	ret


;*************************************************************'
;Define an ascii table

#define C_NUL 0
#define C_SOH 1
#define C_STX 2
#define C_ETX 3
#define C_EOT 4
#define C_ENQ 5
#define C_ACK 6
#define C_BEL 7
#define C_BS  8
#define C_TAB 9
#define C_LF  10
#define C_VT  11
#define C_FF  12
#define C_CR  13
#define C_S0  14

.data
col_ptr:
	0
row_ptr:
	0

col_min:
	0
col_max:
	32
row_min:
	0
row_max:
	512

colBackground:
	0
colFont:
	1