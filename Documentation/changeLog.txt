v.0.11.0
Added additional drawing modes for the monitor
Separated the tape drive out into its own GUI object
Added additional instructions: land, lor, lxor, sbit, gbit, sbitc, xbit, le, leq, eq, neq, leu, lequ, msb, msbn, lsb, lsbn, 
The compiler should output slightly more optimal code now
Added a rudimentary operating system
Added a BASIC interpreter, based on the "tiny BASIC" dialect


v.0.10.4
Fixed a bug with the compiler where function parameters would get loaded incorrectly in certain circumstances
Fixed minor bug in the compiler that prevented temporary variables from being reused after using the "<-" operator
Some error messages from the compiler are slightly more useful
Fixed a minor bug with the text printing library
Some errors in the documentation have been corrected and some sections have been clarified
More code examples have been added and some of the previous samples have been properly commented
The assembler now uses the correct opcode for the "inti" instruction
The compiler now properly recognises the "!=" operator
Several minor issues with the compiler have been resolved
Added an include statement to the compiler
A major issue regarding writing to the tape drive has been resolved
Some minor issues regarding the tape drive status flags have been resolved
The monitor has been optimised
The clock now uses two words to track the time, making the computer able to keep track of 4294967295 times longer timespans
The documentation has been clarified somewhat in some places
The order in which assignment to destination register and "ex" occurs in arithmetic operations has been reversed, so ex can now be used as the destination register for operations with the expected result
The 8-bit instruction macros from libExtnd.txt have now been properly implemented


v.0.10.3
Fixed an error that gave a NullPointerException in the VAB
the non-radial progcom part lacked certain modules, they have now been added
you can now use labels as data in the data section. Their value is always the absolute address of the label, even if not available
some error messages regarding labels are now more informative


v.0.10.2
Fixed an error that occured while writing to the last 8 addresses in memory
The gamedata folder now has a better folder layout
fixed a few error messages in the compiler
clarified the documentation regarding the default color values for the monitor


v.0.10.1
Fixed the incorrect part definitions from update 0.10


v.0.10
removed the r13, r14, r15, a15, a14, a13 register names in order to make things less confusing. The only register that can be accessed by two names now is r0, which also is called "zero"
moved ex to a normal register. This made the ax, sx, rdx, bx instructions redundant, and they have been removed
registers now start initialised to 0 instead of 3735932941
Added a new way of interfacing with Progcom: directly memory mapping your parts.
fixed a bug when saving tapes where the last word would not be saved
removed the serial buses and all associated code, as they have been deprecated by the new hardware system
redid the tape drive from scratch
Fixed a bug where the computer would not load a program if the tape was inserted after the computer is turned on
all programs are now compiled to start at address 256 unless otherwise specifed.
The computer rcs control and the player rcs input listener seems to have been bound to the same area in memory. This is no longer the case.
most of the peripherals(player input listener, stage activation etc.) have been moved away from the progcom class and into separate partmodules.
Added a compiler for a higher level language
renamed #string to #string_compact. renamed #stringw to #string
improved the text printing library. It now works with the non-compact strings. I also removed some buggy features and made the printing work in a more straightforward manner.
The built in string reading function in the text library now works a little more logically
debug console output is now more useful.
labels are no longer hardcoded into the compiler. In order to use them include libLabel.txt
the documentation for the labels are now stored in hardware.txt instead of instructionset.txt
added additional instructions:
	* two additional memory access instructions, wrr and rdr, that calculate read address by adding two registers instead of a register and a constant.
	* inti, which spawns an interrupt using a constant
	* added an arithmetic right shift, sra/srai
	* there is a new operation for the floating point stack, fss, which gives information on the floating point unit.
	* there are now partial move instructions that take a register as their third parameter instead of a constant. Their names are movbr, movhwr, movblr, movhwlr
the cache memory now behaves a little more logically
the read and pop instructions now take an additional cycle to execute if the result is used in the next instruction.
cleaned up the documentation somewhat


v.0.9
Added a tape drive.
Made some clarifications to the serial bus documentation
Fixed a bug that prevented data being sent from ProgCom to parts connected via the serial bus.
There is not an abstract class called ASerialTranceiver that should make interfacing external mods to ProgCom easier
Added an interface that will make it possible to use any part instead of a progCom part as the central hub for connecting serials.
The "sending", "recipied ready" and "receiving" flags from the serial bus should no longer be able to be overwritten.
when in debug mode, the clock rate is now tied to one cycle per frame ratehr than the old systems. This should meke it update at a more reasonable speed for most people.
Typing "step" into the console will now make the emulator execute the next instruction
The print command now takes an offset: "print 100" would print the contents of memory locations 100 -> 200
The serial bus will now only start a transmission if you write to the output buffer
The autldr meta option now defaults to true.
ProgCom now has a tape drive. It is possible to save and load data from it. Programs are now loaded using the drive. See documentation for details.
added the #literal statement to the assembler that should let you insert arbitrary data into the .text section of the program


v.0.8.3
Made some clarifications to the documentation regarding the new literals.


v.0.8.2
Added kellpossibles radial part


v.0.8.1
A couple of labels were not documented. They have now been added to the documentation.
readString in libText.txt should no longer write things to the numpad output areas
When storing text with #string, you can now use several escape characters
strings should no longer have multiple spaces replaced by a single space
there is a #stringw keyword that should pack one character per word instead of four. This takes more space but is easier to use.
you can now adjuse the accuracy of the speed vectors in the same way you can adjust the position vectors.
the movb, movbl, movhw, movhwl instructions have been added to make string handling easier
the muli and divi instructions should state their proper execution time in opcodes.txt
the sri and sli instructions now properly state that their third argument is a constant in opcodes.txt
thanks to thewonderidiot, you should now be able to use hexadecimal and binary literals wherever one is required


v.0.8
Made it possible to activate the next stage through the actiongroup system
there is now a keyboard for entering text with. See keyboard.txt for more info
fixed an issue in the example code that would cause too frequent interrupts
fixed the ascii table in libtext.txt
it should now be possible to interface other mods to progcom. see serial.txt for more info
made some additions to the example code for text input


v.0.7.2
Fixed an issue that caused the emulator to not use the entire cache memory.


v.0.7.1
The monitor should no longer be blurry at lower resolutions.


v.0.7
the nop instruction should no longer set EX to 0
the plugindata folder has been renamed from "ProgCom" to "progcom" to fix an issue affecting linux users
the emulator should now properly use custom action groups 2->10
the "float" instruction never actually existed, it has now been removed from the documentation
since fpush0 no longer exists it has been removed from the documentation
the cmp instruction has been documented
when you give a label or a constant instead of rA/rB, the resulting error message should now be easier to understand
the assembler can now store strings. This is a work-in-prograss feature.
added a monitor


v.0.6
The documentation now properly states that the computer has 64k words of ram.
The opcodes now make a little more sense
Increased the clock speed to 384KHz
removed the gepc and loop instructions
added the ax, sx, bx, rdx, andi, ori, xori instructions
overflow in addition, subtraction and multiplication is now stored in the EX register. When using division the remainder is stored.
the #define statement is now documented


v.0.5
changed the int instruction to use a register instead of the address field to give a larger range of possible values to send it.
most branching instructions have changed the way they operate, from using absolute adresses to using relative ones.
rewrote the assembler from scratch. The assembler now supports:
	* macros
	* adding labels and constants
	* writing constants and floating point data to program code
	* dividing the code into data and code sections
	* file-local labels
	* specifying labels to use relative or absolute adress
	* the assembler now automatically sets the stack pointer to a good value
the assembler will no longer crash the game if you #include a file #including the original file
the assembler now has slightly better syntax
updated the documentation to include these changes and become somewhat clearer
some error messages are now make it slightly more obvious what went wrong.
optimized the "keepVertSpeed" thingy in libFlightHelper
changed example code to use the new syntax


v.0.4
Added the text file "timings" which contains more detailed documentation on the instructions.
I had forgotten to document the instruction gepc, it has now been added to the documentation.
The control panel no longer shows up when using a ship without a computer thing near another ship
There is no longer any gui-related problems with having several computers on your ship.
Documented the memory adresses the "GLOBAL_" labels pointed to
Added the ability for the cpu to control the RCS translation
Improved the documentation in several areas.
removed some debug lines from libfh_holdVertSpeed. It should no longer use up three numpad output locations.
iSqrt in libMath was not working properly. It should be working properly now.
slightly changed how the hardware interrupts behave.
the assembler now is slightly more helpful when there has been a compilation error.
you can now access the players control values.
removed 30 cycles execution time from the fdiv instruction.
added ability to toggle ActionGroups


v. 0.3
the cpu-emulator now simulates cache memory
the cpu-emulator now handles interrupts
the hacky multithreading support has been removed, this made the following changes necessary:
	* removed the instructions gtid, getof, sleep
added a clock. works like the timer but can not be changed by writing to it.
the timer now resets when it's value is greater than that stored in GLOBAL_TIMER_MAX
added the possibility to raise an interrupt with the timer when it resets
added int instruction, which causes an interrupt and sets es register to the parameter
updated the model to the new asas module
you can now specify the level of precision the fixed-point vectors for world coordinates use by writing to GLOBAL_VECTORACCURACY. default is 1024, same as before.
added labels GLOBAL_VECTORACCURACY, GLOBAL_IENABLE, GLOBAL_CLOCK, GLOBAL_IADRESS, GLOBAL_TIMER_MAX
you can now use the console command "run <number>" to start the emulator and set pc to any arbitrary location
fixed the 'subi' instruction. It now does what you'd expect it to do. (used to do nothing)
increased clock speed to 96 KHz to compensate for increased memory access times.
removed suggested use of registers from the instruction set manual. I felt it made the 'registers' section a bit confusing. It is now in a separate file.
cleaned up example code


v. 0.2
inclreased clock speed to 48 KHz
memory location 40 now contains a timer, measuring the time in milliseconds since the program started.
the fadd, fsub, fdiv, fmul, fmerge floating point instructions now take 50% longer to run.
added a label for the timer: GLOBAL_TIMER
added a label for the output format: GLOBAL_NUMPAD_FORMAT
the flight variables now update whenever available, instead of when the instruction "sleep" is run.
updated the documentation to reflect these changes.
updated the example code with the new labels