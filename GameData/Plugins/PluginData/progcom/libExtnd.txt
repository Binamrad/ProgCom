;extended instruction set
;mostly small macros
.text

;return
#macro ret {
	jmpr	ra
}

;roll right
#macro ror rA rB rC {
	shr	rA, rB, rC
	or	rA, rA, ex
}

;roll left
#macro rol rA rB rC {
	shl	rA, rB, rC
	or	rA, rA, ex
}

;roll left immediate
#macro rli rA rB ADDR {
	sli	rA, rB, ADDR
	or	rA, rA, ex
}

;roll right immediate
#macro rri rA rB ADDR {
	sri	rA, rB, ADDR
	or	rA, rA, ex
}

;swaps rA and rB
#macro swap rA rB {
	add	rA, rA, rB;rA = rA+rB
	sub	rB, rA, rB;rB = rA+rB-rB = rA
	sub	rA, rA, rB;rA = rA+rB-rA = rB
}

;negates rB and stores in rA
#macro neg rA rB {
	sub	rA, r0, rB
}

;8 bit instructions

#macro add8 rA rB rC {
	add	rA, rB, rC
	andi	rA, rA, 255
}

#macro sub8 rA rB rC {
	sub	rA, rB, rC
	andi	rA, rA, 255
}

#macro tobyteptr rA rB {
	sri	rA, rB, 2
}

#macro rd8 rA rB ADDR {
	;read from memory
	;mask out byte we want
}

#macro wr8 rA rB ADDR {;this instruction is really hard
	;read from memory location
	;mask out byte we want to replace
	;shift in the data we want to put there
	;write back to proper position
}