using the compiler:

from the console run the jar file with the arguments java -jar pcc.jar
it should also be possible to specify a list of filenames when running the program, like so: java -jar pcc.jar filename1.pcc ... filenameN.pcc


defining functions:

def <functionName> [type1 varname1 [varname2..varnameN] [type2..typeN]] : [returnType1..returnTypeN] {
...
}

examples:

def main char# argv int argc : int {
...
}

def foo : {
...
}

def bar int a b c float d e f : int int float float char char {
...
}


arithmetic operations:
the language is stack based. in order to do an operation the variables are listed first, and then the operation.
the operations are performed in the order they are listed in.
The way to think about this is: the variables are pushed to a stack and then operations are performed on the stack
example statement:
int a b c;//declare variables a, b and c
a b c + =;//push a, b and c to stack. pop b and c from stack and add them. pop b+c and a from the stack, assign the value of b+c to a and push a to stack;

//step by step:

1:	statement:
	a ...
	
	stack:
	a
	---

2:	statement:
	... b ...
	
	stack:
	b
	a
	---

3:	statement:
	... c ...
	
	stack:
	c
	b
	a
	---

4:	statement:
	... + ...
	
	stack:
	b+c
	a
	---

5:	statement:
	... = ...
	
	stack:
	a (a=b+c)
	---

5:	statement:
	... ;
	
	stack:
	---


available operators:

in the result section, parm1 refers to the variable specified first, and param2 refers to the second
in this example:
a 3 +;
a is param1 and 3 is param2
all operators that are part of an operation are taken off the stack and are not present afterwards, unless otherwise specified
the ammount of operators involved in an operation are specified in 'parameters'

operator:	meaning:					parameters:		result:

+		addition					2			param1+param2 pushed to stack
-		subtraction					2			param1-param2 pushed to stack	
*		multiplication					2			param1*param2 pushed to stack
/		division					2			param1/param2 pushed to stack
%		modulus						2			param1%param2 pushed to stack
+=		compount assignment addition			2			param1+param2 pushed to stack, param1 is assigned value of param1+param2
-=		compound assignment subtraction			2			param1-param2 pushed to stack, param1 is assigned value of param1-param2
*=		compound assignment multiplication		2			param1*param2 pushed to stack, param1 is assigned value of param1*param2
/=		compound assignment division			2			param1/param2 pushed to stack, param1 is assigned value of param1/param2
&=		compound assignment bitwise and			2			param1&param2 pushed to stack, param1 is assigned value of param1&param2
^=		compound assignment bitwise xor			2			param1^param2 pushed to stack, param1 is assigned value of param1^param2
|=		compound assignment bitwise or			2			param1|param2 pushed to stack, param1 is assigned value of param1|param2
=		assignment					2			param1 is assigned value of param2
&		bitwise and					2			param1&param2 pushed to stack
|		bitwise or					2			param1|param2 pushed to stack
^		bitwise	xor					2			param1^param2 pushed to stack
&&		logical and (Note: very buggy at the moment)	2			param1&&param2 pushed to stack
||		logical or  (Note: very buggy at the moment)	2			param1||param2 pushed to stack
^^		logical xor (Note: very buggy at the moment)	2			param1^^param2 pushed to stack
#		pointer read					1			the value pointer to by param1 is pushed to stack
<-		pointer write					2			param2 is written to the address pointed to by param1, param1 remains on stack
$		function call					>= 1			parameters are removed from stack, return values are set to the return values from the function
(-)		negation					1			the value -param1 is pushed to the stack
(<type>)	type cast					1			the value of param1 is converted to specified type and pushed to stack
++		preincrement					1			param1 is assigned the value of param1+1 and remains on stack
--		predecrement					1			param1 is assigned the value of param1-1 and remains on stack
+++		postincrement					1			the value of param1 is copied to the stack, param1 is assigned the value of param1+1
---		postdecrement					1			the value of param1 is copied to the stack, param1 is assigned the value of param1-1
@		address of					1			the address of the variable param1 is pushed to stack
>		greater than					2			if param1 > param2, 1 is pushed to stack, otherwise 0
<		less than					2			if param1 < param2, 1 is pushed to stack, otherwise 0
>=		greater than or equal				2			if param1 >= param2, 1 is pushed to stack, otherwise 0
<=		less than or equal				2			if param1 <= param2, 1 is pushed to stack, otherwise 0
!=		not equal					2			if param1 != param2, 1 is pushed to stack, otherwise 0
==		equal						2			if param1 == param2, 1 is pushed to stack, otherwise 0
!		logical	not					1			if param1 == 0, 1 is pushed to stack, otherwise 0


if-statements:

if <statement> <statement>

if the first statement evaluates as true the second statement will be executed

example:

if foo bar <; {
...
}

loops:

while <statement> <statement>

while the first statement evaluates as true the second statement will be executed

example:

while foo bar <; {
...
}

break; will exit the loop
continue; will continue the loop from the top if the loop condition is true


calling functions:

[returnValues] [parameters] functionName$ [=];

if the function has several return values it is illegal to not have the assignment operator after the function call operator.

example:

def add2 int a b : int {
	return a b +;
}
...
	a 1 2 add2$=;//a = 1 + 2

def return3 int a : int int int {
	return a 1 + a 2 + a 3 +;
}
...
	a b c a return3$=;//a = a+1, b = a+2, c = a+3

def foo : {
	return;
}
...
	foo$;


inline assembler:
asm	[variables];
	"inline assembly code"
	"more inline assembler"
	...
	"last line of inline assembler"
	;
	[variables];

after the keyword "asm" a list of variables that are to be used in the inline assembler are specified. They are then arranged in register r1-rN, where N is the ammount of variables specified.
after the list of variables a series of strings containing assembler code are placed. Each string will be placed on a separate line.
after the assembler code the return values are specified. The values are taken from register r1-rN, where N is the ammount of variables that are returnd from the assembler code.

before the inline assembler, all variables are stored, so any change to any register (except ra/fp/sp/a4+) will not result in a loss of data.

example:
int a b c;
asm a b;
"sub	r1, r1, r2"
"addi	r1, r1, 1";
c;//result: c is given the value a - b + 1


type casting:

	int a;
	float b;
	b a (float) =;





***************************************************************
*******************    Program Syntax Sample    ***************
******************* And Equivalent C Statements ***************
***************************************************************


def main : int {	//int main(void)
  int x y z;		//int x, y, z;
  x 2 =;		//x = 2;
  y 3 =;		//y = 3;
  
  z x y * =;		//z = x * y;
  x y z add2 $ =;	//x = add2(y, z);

  y x x + z z + * =;	//y = (x+x)*(z+z);
  
  int# pointer;		//int* pointer;
  pointer z@ =;		//pointer = &z;
  x pointer# =;		//x = *pointer;
  pointer x <-;		//*pointer = x;

  if x y <; {		//if(x < y) {
    while x y <; x++;	//while(x < y) ++x;
  }

  float f;		//float f;
  f z (float) =;	//f = (float)z;

  "Hello, World!" print$;//print("Hello, World!");

  return 0;
}

def add2 int a b : int {//int add2(int a, int b)
  return a b +;		//return a + b;
}

def print char# string:  {
  asm string;
  "push ra"
  "call print_asm"
  "pop ra"
  ;;
  return;
}


